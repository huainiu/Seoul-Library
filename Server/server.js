var restify = require('restify');var http = require('http');var mysql = require('mysql');var cartoDBURL = "youngilcho.cartodb.com";var cartoDBKey = "fffa97227e4f63b12299f9ad343f29b3a952d3f7";var mysqlHost = 'us-cdbr-east.cleardb.com';var mysqlPort = 3306;var mysqlUser = 'b9546c43a9d8ec';var mysqlPass = 'cef29540';var mysqlDatabase = 'heroku_b7a7c9d70f288a6';function createMysql(){	var client = mysql.createClient({    host: mysqlHost,    port: mysqlPort,    user: mysqlUser,    password: mysqlPass	});	client.query('use ' + mysqlDatabase);		return client;}function MeterToDegree(lng, lat, dist) {     var deg = 180;     var brng = deg * Math.PI / 180;     dist = dist/6371000;     var lat1 = lat * Math.PI / 180;     var lon1 = lng * Math.PI / 180;     var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) +                          Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));     var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) *                                  Math.cos(lat1),                                  Math.cos(dist) - Math.sin(lat1) *                                  Math.sin(lat2));     if (isNaN(lat2) || isNaN(lon2)) return null;	radDeg = lat - (lat2 * 180 / Math.PI) ;	return radDeg;}function SearchLibraryByCoord(req, res, next) {	var argumentsArray = [];		if(!req.params.radius)	{		req.params.radius = 2000;		argumentsArray.push("RADIUS : " + req.params.radius);	}		argumentsArray.push("LONGTITUDE : " + req.params.lon);	argumentsArray.push("LATITUDE : " + req.params.lat);	RequestLogger("SearchLibraryByCoord", argumentsArray);		var cartoDBSQL = "SELECT lib_class, cartodb_id, ST_Distance(ST_Transform(ST_GeomFromText('POINT("+req.params.lon+" "+req.params.lat+")',4326), 2097), ST_Transform(the_geom, 2097)), ST_AsText(the_geom), fclty_nm, fly_gbn, gu_nm, hnr_nam, masterno, slaveno, orn_org, opnng_de FROM seoul_library WHERE ST_Intersects( the_geom, ST_Buffer( ST_SetSRID('POINT("+req.params.lon+" "+req.params.lat+")'::geometry , 4326), "+MeterToDegree(req.params.lon, req.params.lat, req.params.radius)+"))";	var cartoDBFullPath = 'http://' + cartoDBURL + '/api/v2/sql?q=' + cartoDBSQL + '&api_key=' + cartoDBKey;	console.log("CartoDB URL : " + cartoDBFullPath);	http.get(cartoDBFullPath, function(res1) {	var data = '';	console.log("Got response: " + res1.statusCode);		res1.setEncoding('utf8');	res1.on('data', function (chunk) {		console.log('\n BODY: ' + chunk.toString());		data += chunk.toString();			});	res1.on('end', function () {		res.charSet = 'utf8';		res.contentType = 'json';		res.send(JSON.parse(data));		console.log('-- Response Send');		})	res1.end	}).on('error', function(e) {	console.log("Got error: " + e.message);	});}function SearchSmallLibraryByCoord(req, res, next) {	var argumentsArray = [];		if(!req.params.radius)	{		req.params.radius = 2000;		argumentsArray.push("RADIUS : " + req.params.radius);	}		argumentsArray.push("LONGTITUDE : " + req.params.lon);	argumentsArray.push("LATITUDE : " + req.params.lat);	RequestLogger("SearchSmallLibraryByCoord", argumentsArray);			var cartoDBSQL = "SELECT lib_class, cartodb_id, ST_AsText(the_geom), fclty_nm, fly_gbn, gu_nm, hnr_nam, masterno, slaveno FROM seoul_small_library WHERE ST_Intersects( the_geom, ST_Buffer( ST_SetSRID('POINT("+req.params.lon+" "+req.params.lat+")'::geometry , 4326), "+MeterToDegree(req.params.lon, req.params.lat, req.params.radius)+"))";	var cartoDBFullPath = 'http://' + cartoDBURL + '/api/v2/sql?q=' + cartoDBSQL + '&api_key=' + cartoDBKey;	console.log("CartoDB URL : " + cartoDBFullPath);	http.get(cartoDBFullPath, function(res1) {	var data = '';	console.log("Got response: " + res1.statusCode);		res1.setEncoding('utf8');	res1.on('data', function (chunk) {		console.log('\n BODY: ' + chunk.toString());		data += chunk.toString();			});	res1.on('end', function () {		res.charSet = 'utf8';		res.contentType = 'json';		res.send(JSON.parse(data));		console.log('-- Response Send');		})	res1.end	}).on('error', function(e) {	console.log("Got error: " + e.message);	});}function SearchSmallLibraryByDist(req, res, next) {	var argumentsArray = [];	argumentsArray.push("GU : " + req.params.gu);		var dongString = "";	if(req.params.dong)	{		dongString = "AND hnr_nam = '" + encodeURI(req.params.dong) + "'";		argumentsArray.push("DONG : " + req.params.dong);	}		RequestLogger("SearchSmallLibraryByDist", argumentsArray);			var cartoDBSQL = "SELECT lib_class, cartodb_id, ST_AsText(the_geom), fclty_nm, fly_gbn, gu_nm, hnr_nam, masterno, slaveno FROM seoul_small_library WHERE gu_nm = '" + encodeURI(req.params.gu) + "'" +dongString;	var cartoDBFullPath = 'http://' + cartoDBURL + '/api/v2/sql?q=' + cartoDBSQL + '&api_key=' + cartoDBKey;	console.log("CartoDB URL : " + cartoDBFullPath);	http.get(cartoDBFullPath, function(res1) {	var data = '';	console.log("Got response: " + res1.statusCode);		res1.setEncoding('utf8');	res1.on('data', function (chunk) {		console.log('\n BODY: ' + chunk.toString());		data += chunk.toString();			});	res1.on('end', function () {		res.charSet = 'utf8';		res.contentType = 'json';		res.send(JSON.parse(data));		console.log('-- Response Send');		})	res1.end	}).on('error', function(e) {	console.log("Got error: " + e.message);	});}function SearchLibraryByDist(req, res, next) {	var argumentsArray = [];	argumentsArray.push("GU : " + req.params.gu);			var dongString = "";	if(req.params.dong)	{		dongString = "AND hnr_nam = '" + encodeURI(req.params.dong) + "'";		argumentsArray.push("DONG : " + req.params.dong);	}		RequestLogger("SearchLibraryByDist", argumentsArray);			var cartoDBSQL = "SELECT lib_class, cartodb_id, ST_AsText(the_geom), fclty_nm, fly_gbn, gu_nm, hnr_nam, masterno, slaveno, orn_org, opnng_de FROM seoul_library WHERE gu_nm = '" + encodeURI(req.params.gu) + "'" +dongString;	var cartoDBFullPath = 'http://' + cartoDBURL + '/api/v2/sql?q=' + cartoDBSQL + '&api_key=' + cartoDBKey;	console.log("CartoDB URL : " + cartoDBFullPath);	http.get(cartoDBFullPath, function(res1) {	var data = '';	console.log("Got response: " + res1.statusCode);		res1.setEncoding('utf8');	res1.on('data', function (chunk) {		console.log('\n BODY: ' + chunk.toString());		data += chunk.toString();			});	res1.on('end', function () {		res.charSet = 'utf8';		res.contentType = 'json';		res.send(JSON.parse(data));		console.log('-- Response Send');		})	res1.end	}).on('error', function(e) {	console.log("Got error: " + e.message);	});}function GetSmallLibraryComment(req, res, next) {	var argumentsArray = [];	argumentsArray.push("idx : " + req.params.idx);		RequestLogger("GetSmallLibraryComment", argumentsArray);			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('select * from small_library_comment where cartodb_id = ' + req.params.idx,	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err) throw err;		else {			console.log('-- MySQL Result --');			for (var i in result) {				var row = result[i];				console.log('comment_id : '+ row.comment_id + ' cartodb_id : '+ row.cartodb_id + ' comment_article : '+ row.comment_article + ' comment_uuid : '+ row.comment_uuid);			}			jsonResult = {"time":executionTime*0.001, "total_rows":result.length, "rows":result};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	});	}function GetSmallLibraryComment(req, res, next) {	var argumentsArray = [];	argumentsArray.push("idx : " + req.params.idx);		RequestLogger("GetSmallLibraryComment", argumentsArray);			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('select * from small_library_comment where cartodb_id = ' + req.params.idx,	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err) throw err;		else {			console.log('-- MySQL Result --');			for (var i in result) {				var row = result[i];				console.log('comment_id : '+ row.comment_id + ' cartodb_id : '+ row.cartodb_id + ' comment_article : '+ row.comment_article + ' comment_uuid : '+ row.comment_uuid);			}			jsonResult = {"time":executionTime*0.001, "total_rows":result.length, "rows":result};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	});	}function GetLibraryComment(req, res, next) {	var argumentsArray = [];	argumentsArray.push("idx : " + req.params.idx);		RequestLogger("GetLibraryComment", argumentsArray);			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('select * from large_library_comment where cartodb_id = ' + req.params.idx,	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err) throw err;		else {			console.log('-- MySQL Result --');			for (var i in result) {				var row = result[i];				console.log('comment_id : '+ row.comment_id + ' cartodb_id : '+ row.cartodb_id + ' comment_article : '+ row.comment_article + ' comment_uuid : '+ row.comment_uuid);			}			jsonResult = {"time":executionTime*0.001, "total_rows":result.length, "rows":result};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	});	}function WriteComment(req, res, next) {	req.setEncoding("utf8");	var argumentsArray = [];	argumentsArray.push("library : " + req.params.library);		argumentsArray.push("idx : " + req.params.idx);	argumentsArray.push("article : " + req.params.article);	argumentsArray.push("uuid : " + req.params.uuid);		RequestLogger("WriteComment", argumentsArray);			if(req.params.library)	{		if(req.params.library == "small")		{			var tableName = "small_library_comment";		}		else if(req.params.library == "large")		{			var tableName = "large_library_comment";		}		else		{			console.log('parameter error : library type is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : library type is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : library type');		jsonResult = {"time":0.001, "result": 'parameter missing : library type'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.idx)	{		if(isNaN(req.params.idx))		{			console.log('parameter error : library id is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : library id is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : library id');		jsonResult = {"time":0.001, "result": 'parameter missing : library id'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.article)	{		if(req.params.article == "")		{					console.log('parameter error : comment article cannot be empty');			jsonResult = {"time":0.001, "result": 'parameter error : comment article cannot be empty'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : comment article');		jsonResult = {"time":0.001, "result": 'parameter missing : comment article'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.uuid)	{		if(req.params.article == "")		{					console.log('parameter error : uuid cannot be empty');			jsonResult = {"time":0.001, "result": 'parameter error : uuid cannot be empty'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : uuid');		jsonResult = {"time":0.001, "result": 'parameter missing : uuid'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('insert into '+ tableName +' (cartodb_id, comment_article, comment_uuid)  values ("' + req.params.idx + '", "' + req.params.article + '", "' + req.params.uuid + '")',	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err)		{			jsonResult = {"time":executionTime*0.001, "result": err};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);		}		else {			console.log('-- insert complete --');			jsonResult = {"time":executionTime*0.001, "result":"success"};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	}); 	}function DeleteComment(req, res, next) {	req.setEncoding("utf8");	var argumentsArray = [];	argumentsArray.push("library : " + req.params.library);		argumentsArray.push("idx : " + req.params.idx);	argumentsArray.push("uuid : " + req.params.uuid);		RequestLogger("DeleteComment", argumentsArray);			if(req.params.library)	{		if(req.params.library == "small")		{			var tableName = "small_library_comment";		}		else if(req.params.library == "large")		{			var tableName = "large_library_comment";		}		else		{			console.log('parameter error : library type is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : library type is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : library type');		jsonResult = {"time":0.001, "result": 'parameter missing : library type'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.idx)	{		if(isNaN(req.params.idx))		{			console.log('parameter error : library id is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : library id is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : library id');		jsonResult = {"time":0.001, "result": 'parameter missing : library id'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}	if(req.params.uuid)	{		if(req.params.article == "")		{					console.log('parameter error : uuid cannot be empty');			jsonResult = {"time":0.001, "result": 'parameter error : uuid cannot be empty'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : uuid');		jsonResult = {"time":0.001, "result": 'parameter missing : uuid'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('DELETE FROM '+ tableName +' where comment_id = "' + req.params.idx + '" AND comment_uuid = "' + req.params.uuid + '"',	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err)		{			jsonResult = {"time":executionTime*0.001, "result": err};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);		}		else {			console.log('-- delete complete --');			if(result.affectedRows == 0)			{				resultMessage = 'parameter error : uuid is not correct';			}			else			{				resultMessage = 'success' 			}			jsonResult = {"time":executionTime*0.001, "result":resultMessage};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	}); 	}function GetLibraryRating(req, res, next) {	var argumentsArray = [];	argumentsArray.push("idx : " + req.params.idx);		RequestLogger("GetLibraryRating", argumentsArray);			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('select cartodb_id, AVG(rating_value) as average from large_library_rating where cartodb_id = ' + req.params.idx,	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err) throw err;		else {			console.log('-- MySQL Result --');			for (var i in result) {				var row = result[i];				console.log('cartodb_id : '+ row.cartodb_id + ' average : '+ row.average);			}			jsonResult = {"time":executionTime*0.001, "total_rows":result.length, "rows":result};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	});	}function GetSmallLibraryRating(req, res, next) {	var argumentsArray = [];	argumentsArray.push("idx : " + req.params.idx);		RequestLogger("GetSmallLibraryRating", argumentsArray);			var sqlClient = createMysql();		var start = new Date().getMilliseconds();	sqlClient.query('select cartodb_id, AVG(rating_value) as average from small_library_rating where cartodb_id = ' + req.params.idx,	function(err, result, fields) {		var end = new Date().getMilliseconds();		var executionTime = end - start;		if (err) throw err;		else {			console.log('-- MySQL Result --');			for (var i in result) {				var row = result[i];				console.log('cartodb_id : '+ row.cartodb_id + ' average : '+ row.average);			}			jsonResult = {"time":executionTime*0.001, "total_rows":result.length, "rows":result};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			console.log('-- Response Send');		}	});	}function DoRating(req, res, next) {	req.setEncoding("utf8");	var argumentsArray = [];	argumentsArray.push("library : " + req.params.library);		argumentsArray.push("idx : " + req.params.idx);	argumentsArray.push("rating : " + req.params.rating);	argumentsArray.push("uuid : " + req.params.uuid);		RequestLogger("DoRating", argumentsArray);			if(req.params.library)	{		if(req.params.library == "small")		{			var tableName = "small_library_rating";		}		else if(req.params.library == "large")		{			var tableName = "large_library_rating";		}		else		{			console.log('parameter error : library type is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : library type is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : library type');		jsonResult = {"time":0.001, "result": 'parameter missing : library type'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.idx)	{		if(isNaN(req.params.idx))		{			console.log('parameter error : library id is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : library id is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : library id');		jsonResult = {"time":0.001, "result": 'parameter missing : library id'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.rating)	{		if(isNaN(req.params.idx))		{			console.log('parameter error : rating is not correct');			jsonResult = {"time":0.001, "result": 'parameter error : rating is not correct'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : rating');		jsonResult = {"time":0.001, "result": 'parameter missing : rating'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}		if(req.params.uuid)	{		if(req.params.article == "")		{					console.log('parameter error : uuid cannot be empty');			jsonResult = {"time":0.001, "result": 'parameter error : uuid cannot be empty'};			res.charSet = 'utf8';			res.contentType = 'json';			res.send(jsonResult);			return null;		}	}	else	{		console.log('parameter missing : uuid');		jsonResult = {"time":0.001, "result": 'parameter missing : uuid'};		res.charSet = 'utf8';		res.contentType = 'json';		res.send(jsonResult);		return null;	}			var sqlClient = createMysql();		sqlClient.query('select cartodb_id, AVG(rating_value) as average from '+ tableName +' where cartodb_id = ' + req.params.idx + ' and rating_uuid = "' + req.params.uuid + '"',	function(err, result, fields) {		if (err) throw err;		else {			if(result[0].cartodb_id != null)			{					console.log('query error : uuid is duplicated');				jsonResult = {"time":0.001, "result": 'query error : uuid is duplicated'};				res.charSet = 'utf8';				res.contentType = 'json';				res.send(jsonResult);				console.log('-- Response Send');			}			else			{				var start = new Date().getMilliseconds();				sqlClient.query('insert into '+ tableName +' (cartodb_id, rating_value, rating_uuid)  values ("' + req.params.idx + '", "' + req.params.rating + '", "' + req.params.uuid + '")',				function(err, result, fields) {					var end = new Date().getMilliseconds();					var executionTime = end - start;					if (err)					{						jsonResult = {"time":executionTime*0.001, "result": err};						res.charSet = 'utf8';						res.contentType = 'json';						res.send(jsonResult);					}					else {						console.log('-- insert complete --');						jsonResult = {"time":executionTime*0.001, "result":"success"};						res.charSet = 'utf8';						res.contentType = 'json';						res.send(jsonResult);						console.log('-- Response Send');					}				}); 					}		}	});	}function SearchSmallLibraryByName(req, res, next) {	var argumentsArray = [];	argumentsArray.push("Name : " + req.params.name);		RequestLogger("SearchSmallLibraryByName", argumentsArray);			var cartoDBSQL = "SELECT lib_class, cartodb_id, ST_AsText(the_geom), fclty_nm, fly_gbn, gu_nm, hnr_nam, masterno, slaveno FROM seoul_small_library WHERE fclty_nm like '" + encodeURI('%' + req.params.name + '%') + "'";	var cartoDBFullPath = 'http://' + cartoDBURL + '/api/v2/sql?q=' + cartoDBSQL + '&api_key=' + cartoDBKey;	console.log("CartoDB URL : " + cartoDBFullPath);	http.get(cartoDBFullPath, function(res1) {	var data = '';	console.log("Got response: " + res1.statusCode);		res1.setEncoding('utf8');	res1.on('data', function (chunk) {		console.log('\n BODY: ' + chunk.toString());		data += chunk.toString();			});	res1.on('end', function () {		res.charSet = 'utf8';		res.contentType = 'json';		res.send(JSON.parse(data));		console.log('-- Response Send');		})	res1.end	}).on('error', function(e) {	console.log("Got error: " + e.message);	});}function SearchLibraryByName(req, res, next) {	var argumentsArray = [];	argumentsArray.push("Name : " + req.params.name);			RequestLogger("SearchLibraryByDist", argumentsArray);			var cartoDBSQL = "SELECT lib_class, cartodb_id, ST_AsText(the_geom), fclty_nm, fly_gbn, gu_nm, hnr_nam, masterno, slaveno, orn_org, opnng_de FROM seoul_library WHERE fclty_nm like '" + encodeURI('%' + req.params.name + '%') + "'";	var cartoDBFullPath = 'http://' + cartoDBURL + '/api/v2/sql?q=' + cartoDBSQL + '&api_key=' + cartoDBKey;	console.log("CartoDB URL : " + cartoDBFullPath);	http.get(cartoDBFullPath, function(res1) {	var data = '';	console.log("Got response: " + res1.statusCode);		res1.setEncoding('utf8');	res1.on('data', function (chunk) {		console.log('\n BODY: ' + chunk.toString());		data += chunk.toString();			});	res1.on('end', function () {		res.charSet = 'utf8';		res.contentType = 'json';		res.send(JSON.parse(data));		console.log('-- Response Send');		})	res1.end	}).on('error', function(e) {	console.log("Got error: " + e.message);	});}function RequestLogger(request, arguments){	console.log("REQUEST : " + request);	console.log("-- PARAMETER --")	for(i=0; i<arguments.length; i++)	{		console.log(arguments[i]);	}}var server = restify.createServer();server.use(restify.bodyParser({ mapParams: true }));server.get('/large/:lon/:lat', SearchLibraryByCoord);server.head('/large/:lon/:lat', SearchLibraryByCoord);server.get('/large/:lon/:lat/:radius', SearchLibraryByCoord);server.head('/large/:lon/:lat/:radius', SearchLibraryByCoord);server.get('/small/:lon/:lat', SearchSmallLibraryByCoord);server.head('/small/:lon/:lat', SearchSmallLibraryByCoord);server.get('/small/:lon/:lat/:radius', SearchSmallLibraryByCoord);server.head('/small/:lon/:lat/:radius', SearchSmallLibraryByCoord);server.get('/dist/small/:gu/:dong', SearchSmallLibraryByDist);server.head('/dist/small/:gu/:dong', SearchSmallLibraryByDist);server.get('/dist/small/:gu', SearchSmallLibraryByDist);server.head('/dist/small/:gu', SearchSmallLibraryByDist);server.get('/dist/large/:gu/:dong', SearchLibraryByDist);server.head('/dist/large/:gu/:dong', SearchLibraryByDist);server.get('/dist/large/:gu', SearchLibraryByDist);server.head('/dist/large/:gu', SearchLibraryByDist);server.get('/name/small/:name', SearchSmallLibraryByName);server.head('/name/small/:name', SearchSmallLibraryByName);server.get('/name/large/:name', SearchLibraryByName);server.head('/name/large/:name', SearchLibraryByName);server.get('/comment/small/:idx', GetSmallLibraryComment);server.head('/comment/small/:idx', GetSmallLibraryComment);server.get('/comment/large/:idx', GetLibraryComment);server.head('/comment/large/:idx', GetLibraryComment);server.post('/comment/update', WriteComment);server.get('/comment/delete/:library/:idx/:uuid', DeleteComment);server.head('/comment/delete/:library/:idx/:uuid', DeleteComment);server.get('/rating/small/:idx', GetSmallLibraryRating);server.head('/rating/small/:idx', GetSmallLibraryRating);server.get('/rating/large/:idx', GetLibraryRating);server.head('/rating/large/:idx', GetLibraryRating);server.post('/rating/update', DoRating);server.listen(process.env.PORT || 8080, function() {  console.log('%s listening at %s', "SeoulLibrary Server", server.url);});